[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CalCOFI.io Docs",
    "section": "",
    "text": "1 Process\n\n\n\n\n\n\n\nFigure 1.1: CalCOFI data workflow.\n\n\n\nThe original raw data, most often in tabular format [e.g., comma-separated value (*.csv)], gets ingested into the database by R scripts that use functions and lookup data tables in the R package calcofi4r where functions are organized into Read, Analyze and Visualize concepts. The application programming interface (API) provides a program-language-agnostic public interface for rendering subsets of data and custom visualizations given a set of documented input parameters for feeding interactive applications (Apps) using Shiny (or any other web application framework) and reports using Rmarkdown (or any other report templating framework). Finally, R scripts will publish metadata (as Ecological Metadata Language) and data packages (e.g., in Darwin format) for discovery on a variety of data portals oriented around slicing the tabular or gridded data (ERDDAP), biogeographic analysis (OBIS), long-term archive (DataOne, NCEI) or metadata discovery (InPort). The database will be spatially enabled by PostGIS for summarizing any and all data by Areas of Interest (AoIs), whether pre-defined (e.g., sanctuaries, MPAs, counties, etc.) or arbitrary new areas. (Figure 1.1)\n\nERDDAP: great for gridded or tabular data, but does not aggregate on the server or clip to a specific area of interest",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Process</span>"
    ]
  },
  {
    "objectID": "reports.html",
    "href": "reports.html",
    "title": "2  Reports",
    "section": "",
    "text": "2.1 Sanctuaries",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reports</span>"
    ]
  },
  {
    "objectID": "reports.html#sanctuaries",
    "href": "reports.html#sanctuaries",
    "title": "2  Reports",
    "section": "",
    "text": "Channel Islands WebCR\nweb-enabled Condition Report\n\nForage Fish\nexample of using calcofi4r functions that pull from the API\n\nUCSB Student Capstone",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reports</span>"
    ]
  },
  {
    "objectID": "apps.html",
    "href": "apps.html",
    "title": "3  Applications",
    "section": "",
    "text": "CalCOFI Oceanography\noceanographic summarization by arbitrary area of interest and sampling period\nUCSB Student Capstone",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Applications</span>"
    ]
  },
  {
    "objectID": "api.html",
    "href": "api.html",
    "title": "4  API",
    "section": "",
    "text": "4.1 /variables: get list of variables for timeseries\nGet list of variables for use in /timeseries",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>API</span>"
    ]
  },
  {
    "objectID": "api.html#species_groups-get-species-groups-for-larvae",
    "href": "api.html#species_groups-get-species-groups-for-larvae",
    "title": "4  API",
    "section": "4.2 /species_groups: get species groups for larvae",
    "text": "4.2 /species_groups: get species groups for larvae\nNot yet working. Get list of species groups for use with variables larvae_counts.count in /timeseries",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>API</span>"
    ]
  },
  {
    "objectID": "api.html#timeseries-get-time-series-data",
    "href": "api.html#timeseries-get-time-series-data",
    "title": "4  API",
    "section": "4.3 /timeseries: get time series data",
    "text": "4.3 /timeseries: get time series data",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>API</span>"
    ]
  },
  {
    "objectID": "api.html#cruises-get-list-of-cruises",
    "href": "api.html#cruises-get-list-of-cruises",
    "title": "4  API",
    "section": "4.4 /cruises: get list of cruises",
    "text": "4.4 /cruises: get list of cruises\nGet list of cruises with summary stats as CSV table for time (date_beg)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>API</span>"
    ]
  },
  {
    "objectID": "api.html#raster-get-raster-map-of-variable",
    "href": "api.html#raster-get-raster-map-of-variable",
    "title": "4  API",
    "section": "4.5 /raster: get raster map of variable",
    "text": "4.5 /raster: get raster map of variable\nGet raster of variable",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>API</span>"
    ]
  },
  {
    "objectID": "api.html#cruise_lines-get-station-lines-from-cruises",
    "href": "api.html#cruise_lines-get-station-lines-from-cruises",
    "title": "4  API",
    "section": "4.6 /cruise_lines: get station lines from cruises",
    "text": "4.6 /cruise_lines: get station lines from cruises\nGet station lines from cruises (with more than one cast)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>API</span>"
    ]
  },
  {
    "objectID": "api.html#cruise_line_profile",
    "href": "api.html#cruise_line_profile",
    "title": "4  API",
    "section": "4.7 /cruise_line_profile",
    "text": "4.7 /cruise_line_profile\nGet profile at depths for given variable of casts along line of stations",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>API</span>"
    ]
  },
  {
    "objectID": "db.html",
    "href": "db.html",
    "title": "5  Database",
    "section": "",
    "text": "5.1 Database naming conventions",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Database</span>"
    ]
  },
  {
    "objectID": "db.html#database-naming-conventions",
    "href": "db.html#database-naming-conventions",
    "title": "5  Database",
    "section": "",
    "text": "Learn SQL: Naming Conventions\nBest Practices for Database Naming Conventions - Drygast.NET\n\n\n5.1.1 Name tables\n\nTable names are plural and use all lower case.\n\n\n\n5.1.2 Name columns\n\nTo name columns, use snake-case (i.e., lower-case with underscores) so as to prevent the need to quote SQL statements. (TIP: Use janitor::clean_names() to convert a table.)\nUnique identifiers are suffixed with:\n\n*_id for unique integer keys;\n*_key for unique string keys;\n*_seq for auto-incrementing sequence integer keys.\n\nSuffix with units where applicable (e.g., *_m for meters, *_km for kilometers, degc for degrees Celsius). See units vignette.\nSet geometry column to geom (used by PostGIS spatial extension). If the table has multiple geometry columns, use geom for the default geometry column and geom_{type} for additional geometry columns (e.g., geom_point, geom_line, geom_polygon).",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Database</span>"
    ]
  },
  {
    "objectID": "db.html#describe-tables-and-columns",
    "href": "db.html#describe-tables-and-columns",
    "title": "5  Database",
    "section": "5.2 Describe tables and columns",
    "text": "5.2 Describe tables and columns\n\nUse the COMMENT clause to add descriptions to tables and columns, either through the GUI pgadmin.calcofi.io (by right-clicking on the table or column and selecting Properties) or with SQL. For example:\nCOMMENT ON TABLE public.aoi_fed_sanctuaries IS 'areas of interest (`aoi`) polygons for federal **National Marine Sanctuaries**; loaded by _workflow_ [load_sanctuaries](https://calcofi.io/workflows/load_sanctuaries.html)';\nNote the use of markdown for including links and formatting (e.g., bold, code, italics), such that the above SQL will render like so: &gt; areas of interest (aoi) polygons for federal National Marine Sanctuaries; loaded by workflow load_sanctuaries\nIt is especially helpful to link to any workflows that are responsible for the ingesting or updating of the input data.\nThese descriptions can be viewed in the CalCOFI API api.calcofi.io as CSV tables (see code in calcofi/api: plumber.R):\n\napi.calcofi.io/db_tables\nfields:\n\n\nschema: (only “public” so far)\ntable_type: “table”, “view”, or “materialized view” (none yet)\ntable: name of table\ntable_description: description of table (possibly in markdown)\n\napi.calcofi.io/db_columns\nfields:\n\n\nschema: (only “public” so far)\ntable_type: “table”, “view”, or “materialized view” (none yet)\ntable: name of table\ncolumn: name of column\ncolumn_type: data type of column\ncolumn_description: description of column (possibly in markdown)\n\n\nFetch and display these descriptions into an interactive table with calcofi4r::cc_db_catalog().",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Database</span>"
    ]
  },
  {
    "objectID": "db.html#relational-database-structure",
    "href": "db.html#relational-database-structure",
    "title": "5  Database",
    "section": "5.3 Relational Database Structure",
    "text": "5.3 Relational Database Structure",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Database</span>"
    ]
  },
  {
    "objectID": "db.html#spatial-tips",
    "href": "db.html#spatial-tips",
    "title": "5  Database",
    "section": "5.4 Spatial Tips",
    "text": "5.4 Spatial Tips\n\nUse ST_Subdivide() when running spatial joins on large polygons.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Database</span>"
    ]
  },
  {
    "objectID": "refs.html",
    "href": "refs.html",
    "title": "6  References",
    "section": "",
    "text": "6.1 R packages",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>References</span>"
    ]
  },
  {
    "objectID": "refs.html#r-packages",
    "href": "refs.html#r-packages",
    "title": "6  References",
    "section": "",
    "text": "API: plumber (Schloerke and Allen 2024)\ndocs: Quarto (Allaire and Dervieux 2024)\napps: Shiny (Chang et al. 2024)\n\n\n\n\n\nAllaire, JJ, and Christophe Dervieux. 2024. Quarto: R Interface to Quarto Markdown Publishing System. https://github.com/quarto-dev/quarto-r.\n\n\nChang, Winston, Joe Cheng, JJ Allaire, Carson Sievert, Barret Schloerke, Yihui Xie, Jeff Allen, Jonathan McPherson, Alan Dipert, and Barbara Borges. 2024. Shiny: Web Application Framework for r. https://shiny.posit.co/.\n\n\nSchloerke, Barret, and Jeff Allen. 2024. Plumber: An API Generator for r. https://www.rplumber.io.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>References</span>"
    ]
  }
]